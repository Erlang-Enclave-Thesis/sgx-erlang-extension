# This file is inspired by examples from https://github.com/oscarlab/graphene/tree/master/Examples/nginx
# Heavily modified by Eliot Roxbergh and Emil Hemdal for Ericsson AB

# The executable to load in Graphene.
loader.exec = file:$(INSTALL_DIR)/lib/erlang/erts-11.0/bin/erlexec
loader.execname = erlexec

# Graphene environment, including the path to the library OS and the debug
# option (inline/none).
loader.preload = file:$(GRAPHENEDIR)/Runtime/libsysdb.so
loader.debug_type = $(GRAPHENEDEBUG)

# Environment variables
loader.env.LD_LIBRARY_PATH = /lib:/lib/x86_64-linux-gnu

# Erlang Environment Variables
loader.env.ROOTDIR = $(INSTALL_DIR_ABSPATH)/lib/erlang
loader.env.BINDIR = $(INSTALL_DIR_ABSPATH)/lib/erlang/erts-11.0/bin
loader.env.EMU = beam

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENEDIR.
fs.mount.lib.type = chroot
fs.mount.lib.path = /lib
fs.mount.lib.uri = file:$(GRAPHENEDIR)/Runtime

# Host-level libraries (/lib/x86_64-linux-gnu) required by Erlang.
fs.mount.lib2.type = chroot
fs.mount.lib2.path = /lib/x86_64-linux-gnu
fs.mount.lib2.uri = file:/lib/x86_64-linux-gnu

# TODO is this necessary?
fs.mount.etc.type = chroot
fs.mount.etc.path = /etc
fs.mount.etc.uri = file:/etc

# Mount the current working directory
fs.mount.cwd.type = chroot
fs.mount.cwd.path = $(INSTALL_DIR_ABSPATH)
fs.mount.cwd.uri = file:$(INSTALL_DIR)

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing.
sgx.enclave_size = 256M
#sgx.enclave_size = 2G

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
#
sgx.thread_num = 2

sgx.allowed_files.erl_crash_dump = file:./erl_crash.dump

# SGX trusted libraries

# Glibc libraries
sgx.trusted_files.ld = file:$(GRAPHENEDIR)/Runtime/ld-linux-x86-64.so.2
sgx.trusted_files.libc = file:$(GRAPHENEDIR)/Runtime/libc.so.6
sgx.trusted_files.libm = file:$(GRAPHENEDIR)/Runtime/libm.so.6
sgx.trusted_files.libdl = file:$(GRAPHENEDIR)/Runtime/libdl.so.2
sgx.trusted_files.librt = file:$(GRAPHENEDIR)/Runtime/librt.so.1
sgx.trusted_files.libutil = file:$(GRAPHENEDIR)/Runtime/libutil.so.1
sgx.trusted_files.libpthread = file:$(GRAPHENEDIR)/Runtime/libpthread.so.0

# Erlang dependencies (shared libraries)
$(ERLANG_TRUSTED_LIBS)

# Erlang required files (trusted)
sgx.trusted_files.beam_smp = file:$(INSTALL_DIR)/lib/erlang/erts-11.0/bin/beam.smp

sgx.trusted_children.beam_smp = file:./beam.smp.sig
